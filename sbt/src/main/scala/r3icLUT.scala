package Work


import Chisel._
import Node._
import scala.math._






class r3icLUT () extends Module {
val io = new Bundle {
  val ina = UInt(INPUT, 11)
  val inb = UInt(INPUT, 3)  
  val r3IC = UInt(OUTPUT, 3)
  }

val constants = Vec(Array(UInt(0), UInt(0), UInt(0), UInt(0), UInt(0), UInt(1), UInt(0), UInt(0), UInt(0), UInt(0), UInt(2), UInt(0), UInt(0), UInt(0), UInt(0), UInt(0), UInt(1), UInt(0), UInt(0), UInt(0), UInt(1), UInt(1), UInt(0), UInt(0), UInt(0), UInt(2), UInt(1), UInt(0), UInt(0), UInt(0), UInt(0), UInt(2), UInt(0), UInt(0), UInt(0), UInt(1), UInt(2), UInt(0), UInt(0), UInt(0), UInt(2), UInt(2), UInt(0), UInt(0), UInt(0), UInt(0), UInt(0), UInt(1), UInt(0), UInt(0), UInt(1), UInt(0), UInt(1), UInt(0), UInt(0), UInt(2), UInt(0), UInt(1), UInt(0), UInt(0), UInt(0), UInt(1), UInt(1), UInt(0), UInt(0), UInt(1), UInt(1), UInt(1), UInt(0), UInt(0), UInt(2), UInt(1), UInt(1), UInt(0), UInt(0), UInt(0), UInt(2), UInt(1), UInt(0), UInt(0), UInt(1), UInt(2), UInt(1), UInt(0), UInt(0), UInt(2), UInt(2), UInt(1), UInt(0), UInt(0), UInt(0), UInt(0), UInt(2), UInt(0), UInt(0), UInt(1), UInt(0), UInt(2), UInt(0), UInt(0), UInt(2), UInt(0), UInt(2), UInt(0), UInt(0), UInt(0), UInt(1), UInt(2), UInt(0), UInt(0), UInt(1), UInt(1), UInt(2), UInt(0), UInt(0), UInt(2), UInt(1), UInt(2), UInt(0), UInt(0), UInt(0), UInt(2), UInt(2), UInt(0), UInt(0), UInt(1), UInt(2), UInt(2), UInt(0), UInt(0), UInt(2), UInt(2), UInt(2), UInt(0), UInt(0), UInt(0), UInt(0), UInt(0), UInt(1), UInt(0), UInt(1), UInt(0), UInt(0), UInt(1), UInt(0), UInt(2), UInt(0), UInt(0), UInt(1), UInt(0), UInt(0), UInt(1), UInt(0), UInt(1), UInt(0), UInt(1), UInt(1), UInt(0), UInt(1), UInt(0), UInt(2), UInt(1), UInt(0), UInt(1), UInt(0), UInt(0), UInt(2), UInt(0), UInt(1), UInt(0), UInt(1), UInt(2), UInt(0), UInt(1), UInt(0), UInt(2), UInt(2), UInt(0), UInt(1), UInt(0), UInt(0), UInt(0), UInt(1), UInt(1), UInt(0), UInt(1), UInt(0), UInt(1), UInt(1), UInt(0), UInt(2), UInt(0), UInt(1), UInt(1), UInt(0), UInt(0), UInt(1), UInt(1), UInt(1), UInt(0), UInt(1), UInt(1), UInt(1), UInt(1), UInt(0), UInt(2), UInt(1), UInt(1), UInt(1), UInt(0), UInt(0), UInt(2), UInt(1), UInt(1), UInt(0), UInt(1), UInt(2), UInt(1), UInt(1), UInt(0), UInt(2), UInt(2), UInt(1), UInt(1), UInt(0), UInt(0), UInt(0), UInt(2), UInt(1), UInt(0), UInt(1), UInt(0), UInt(2), UInt(1), UInt(0), UInt(2), UInt(0), UInt(2), UInt(1), UInt(0), UInt(0), UInt(1), UInt(2), UInt(1), UInt(0), UInt(1), UInt(1), UInt(2), UInt(1), UInt(0), UInt(2), UInt(1), UInt(2), UInt(1), UInt(0), UInt(0), UInt(2), UInt(2), UInt(1), UInt(0), UInt(1), UInt(2), UInt(2), UInt(1), UInt(0), UInt(2), UInt(2), UInt(2), UInt(1), UInt(0), UInt(0), UInt(0), UInt(0), UInt(2), UInt(0), UInt(1), UInt(0), UInt(0), UInt(2), UInt(0), UInt(2), UInt(0), UInt(0), UInt(2), UInt(0), UInt(0), UInt(1), UInt(0), UInt(2), UInt(0), UInt(1), UInt(1), UInt(0), UInt(2), UInt(0), UInt(2), UInt(1), UInt(0), UInt(2), UInt(0), UInt(0), UInt(2), UInt(0), UInt(2), UInt(0), UInt(1), UInt(2), UInt(0), UInt(2), UInt(0), UInt(2), UInt(2), UInt(0), UInt(2), UInt(0), UInt(0), UInt(0), UInt(1), UInt(2), UInt(0), UInt(1), UInt(0), UInt(1), UInt(2), UInt(0), UInt(2), UInt(0), UInt(1), UInt(2), UInt(0), UInt(0), UInt(1), UInt(1), UInt(2), UInt(0), UInt(1), UInt(1), UInt(1), UInt(2), UInt(0), UInt(2), UInt(1), UInt(1), UInt(2), UInt(0), UInt(0), UInt(2), UInt(1), UInt(2), UInt(0), UInt(1), UInt(2), UInt(1), UInt(2), UInt(0), UInt(2), UInt(2), UInt(1), UInt(2), UInt(0), UInt(0), UInt(0), UInt(2), UInt(2), UInt(0), UInt(1), UInt(0), UInt(2), UInt(2), UInt(0), UInt(2), UInt(0), UInt(2), UInt(2), UInt(0), UInt(0), UInt(1), UInt(2), UInt(2), UInt(0), UInt(1), UInt(1), UInt(2), UInt(2), UInt(0), UInt(2), UInt(1), UInt(2), UInt(2), UInt(0), UInt(0), UInt(2), UInt(2), UInt(2), UInt(0), UInt(1), UInt(2), UInt(2), UInt(2), UInt(0), UInt(2), UInt(2), UInt(2), UInt(2), UInt(0), UInt(0), UInt(0), UInt(0), UInt(0), UInt(1), UInt(1), UInt(0), UInt(0), UInt(0), UInt(1), UInt(2), UInt(0), UInt(0), UInt(0), UInt(1), UInt(0), UInt(1), UInt(0), UInt(0), UInt(1), UInt(1), UInt(1), UInt(0), UInt(0), UInt(1), UInt(2), UInt(1), UInt(0), UInt(0), UInt(1), UInt(0), UInt(2), UInt(0), UInt(0), UInt(1), UInt(1), UInt(2), UInt(0), UInt(0), UInt(1), UInt(2), UInt(2), UInt(0), UInt(0), UInt(1), UInt(0), UInt(0), UInt(1), UInt(0), UInt(1), UInt(1), UInt(0), UInt(1), UInt(0), UInt(1), UInt(2), UInt(0), UInt(1), UInt(0), UInt(1), UInt(0), UInt(1), UInt(1), UInt(0), UInt(1), UInt(1), UInt(1), UInt(1), UInt(0), UInt(1), UInt(2), UInt(1), UInt(1), UInt(0), UInt(1), UInt(0), UInt(2), UInt(1), UInt(0), UInt(1), UInt(1), UInt(2), UInt(1), UInt(0), UInt(1), UInt(2), UInt(2), UInt(1), UInt(0), UInt(1), UInt(0), UInt(0), UInt(2), UInt(0), UInt(1), UInt(1), UInt(0), UInt(2), UInt(0), UInt(1), UInt(2), UInt(0), UInt(2), UInt(0), UInt(1), UInt(0), UInt(1), UInt(2), UInt(0), UInt(1), UInt(1), UInt(1), UInt(2), UInt(0), UInt(1), UInt(2), UInt(1), UInt(2), UInt(0), UInt(1), UInt(0), UInt(2), UInt(2), UInt(0), UInt(1), UInt(1), UInt(2), UInt(2), UInt(0), UInt(1), UInt(2), UInt(2), UInt(2), UInt(0), UInt(1), UInt(0), UInt(0), UInt(0), UInt(1), UInt(1), UInt(1), UInt(0), UInt(0), UInt(1), UInt(1), UInt(2), UInt(0), UInt(0), UInt(1), UInt(1), UInt(0), UInt(1), UInt(0), UInt(1), UInt(1), UInt(1), UInt(1), UInt(0), UInt(1), UInt(1), UInt(2), UInt(1), UInt(0), UInt(1), UInt(1), UInt(0), UInt(2), UInt(0), UInt(1), UInt(1), UInt(1), UInt(2), UInt(0), UInt(1), UInt(1), UInt(2), UInt(2), UInt(0), UInt(1), UInt(1), UInt(0), UInt(0), UInt(1), UInt(1), UInt(1), UInt(1), UInt(0), UInt(1), UInt(1), UInt(1), UInt(2), UInt(0), UInt(1), UInt(1), UInt(1), UInt(0), UInt(1), UInt(1), UInt(1), UInt(1), UInt(1), UInt(1), UInt(1), UInt(1), UInt(1), UInt(2), UInt(1), UInt(1), UInt(1), UInt(1), UInt(0), UInt(2), UInt(1), UInt(1), UInt(1), UInt(1), UInt(2), UInt(1), UInt(1), UInt(1), UInt(2), UInt(2), UInt(1), UInt(1), UInt(1), UInt(0), UInt(0), UInt(2), UInt(1), UInt(1), UInt(1), UInt(0), UInt(2), UInt(1), UInt(1), UInt(2), UInt(0), UInt(2), UInt(1), UInt(1), UInt(0), UInt(1), UInt(2), UInt(1), UInt(1), UInt(1), UInt(1), UInt(2), UInt(1), UInt(1), UInt(2), UInt(1), UInt(2), UInt(1), UInt(1), UInt(0), UInt(2), UInt(2), UInt(1), UInt(1), UInt(1), UInt(2), UInt(2), UInt(1), UInt(1), UInt(2), UInt(2), UInt(2), UInt(1), UInt(1), UInt(0), UInt(0), UInt(0), UInt(2), UInt(1), UInt(1), UInt(0), UInt(0), UInt(2), UInt(1), UInt(2), UInt(0), UInt(0), UInt(2), UInt(1), UInt(0), UInt(1), UInt(0), UInt(2), UInt(1), UInt(1), UInt(1), UInt(0), UInt(2), UInt(1), UInt(2), UInt(1), UInt(0), UInt(2), UInt(1), UInt(0), UInt(2), UInt(0), UInt(2), UInt(1), UInt(1), UInt(2), UInt(0), UInt(2), UInt(1), UInt(2), UInt(2), UInt(0), UInt(2), UInt(1), UInt(0), UInt(0), UInt(1), UInt(2), UInt(1), UInt(1), UInt(0), UInt(1), UInt(2), UInt(1), UInt(2), UInt(0), UInt(1), UInt(2), UInt(1), UInt(0), UInt(1), UInt(1), UInt(2), UInt(1), UInt(1), UInt(1), UInt(1), UInt(2), UInt(1), UInt(2), UInt(1), UInt(1), UInt(2), UInt(1), UInt(0), UInt(2), UInt(1), UInt(2), UInt(1), UInt(1), UInt(2), UInt(1), UInt(2), UInt(1), UInt(2), UInt(2), UInt(1), UInt(2), UInt(1), UInt(0), UInt(0), UInt(2), UInt(2), UInt(1), UInt(1), UInt(0), UInt(2), UInt(2), UInt(1), UInt(2), UInt(0), UInt(2), UInt(2), UInt(1), UInt(0), UInt(1), UInt(2), UInt(2), UInt(1), UInt(1), UInt(1), UInt(2), UInt(2), UInt(1), UInt(2), UInt(1), UInt(2), UInt(2), UInt(1), UInt(0), UInt(2), UInt(2), UInt(2), UInt(1), UInt(1), UInt(2), UInt(2), UInt(2), UInt(1), UInt(2), UInt(2), UInt(2), UInt(2), UInt(1), UInt(0), UInt(0), UInt(0), UInt(0), UInt(2), UInt(1), UInt(0), UInt(0), UInt(0), UInt(2), UInt(2), UInt(0), UInt(0), UInt(0), UInt(2), UInt(0), UInt(1), UInt(0), UInt(0), UInt(2), UInt(1), UInt(1), UInt(0), UInt(0), UInt(2), UInt(2), UInt(1), UInt(0), UInt(0), UInt(2), UInt(0), UInt(2), UInt(0), UInt(0), UInt(2), UInt(1), UInt(2), UInt(0), UInt(0), UInt(2), UInt(2), UInt(2), UInt(0), UInt(0), UInt(2), UInt(0), UInt(0), UInt(1), UInt(0), UInt(2), UInt(1), UInt(0), UInt(1), UInt(0), UInt(2), UInt(2), UInt(0), UInt(1), UInt(0), UInt(2), UInt(0), UInt(1), UInt(1), UInt(0), UInt(2), UInt(1), UInt(1), UInt(1), UInt(0), UInt(2), UInt(2), UInt(1), UInt(1), UInt(0), UInt(2), UInt(0), UInt(2), UInt(1), UInt(0), UInt(2), UInt(1), UInt(2), UInt(1), UInt(0), UInt(2), UInt(2), UInt(2), UInt(1), UInt(0), UInt(2), UInt(0), UInt(0), UInt(2), UInt(0), UInt(2), UInt(1), UInt(0), UInt(2), UInt(0), UInt(2), UInt(2), UInt(0), UInt(2), UInt(0), UInt(2), UInt(0), UInt(1), UInt(2), UInt(0), UInt(2), UInt(1), UInt(1), UInt(2), UInt(0), UInt(2), UInt(2), UInt(1), UInt(2), UInt(0), UInt(2), UInt(0), UInt(2), UInt(2), UInt(0), UInt(2), UInt(1), UInt(2), UInt(2), UInt(0), UInt(2), UInt(2), UInt(2), UInt(2), UInt(0), UInt(2), UInt(0), UInt(0), UInt(0), UInt(1), UInt(2), UInt(1), UInt(0), UInt(0), UInt(1), UInt(2), UInt(2), UInt(0), UInt(0), UInt(1), UInt(2), UInt(0), UInt(1), UInt(0), UInt(1), UInt(2), UInt(1), UInt(1), UInt(0), UInt(1), UInt(2), UInt(2), UInt(1), UInt(0), UInt(1), UInt(2), UInt(0), UInt(2), UInt(0), UInt(1), UInt(2), UInt(1), UInt(2), UInt(0), UInt(1), UInt(2), UInt(2), UInt(2), UInt(0), UInt(1), UInt(2), UInt(0), UInt(0), UInt(1), UInt(1), UInt(2), UInt(1), UInt(0), UInt(1), UInt(1), UInt(2), UInt(2), UInt(0), UInt(1), UInt(1), UInt(2), UInt(0), UInt(1), UInt(1), UInt(1), UInt(2), UInt(1), UInt(1), UInt(1), UInt(1), UInt(2), UInt(2), UInt(1), UInt(1), UInt(1), UInt(2), UInt(0), UInt(2), UInt(1), UInt(1), UInt(2), UInt(1), UInt(2), UInt(1), UInt(1), UInt(2), UInt(2), UInt(2), UInt(1), UInt(1), UInt(2), UInt(0), UInt(0), UInt(2), UInt(1), UInt(2), UInt(1), UInt(0), UInt(2), UInt(1), UInt(2), UInt(2), UInt(0), UInt(2), UInt(1), UInt(2), UInt(0), UInt(1), UInt(2), UInt(1), UInt(2), UInt(1), UInt(1), UInt(2), UInt(1), UInt(2), UInt(2), UInt(1), UInt(2), UInt(1), UInt(2), UInt(0), UInt(2), UInt(2), UInt(1), UInt(2), UInt(1), UInt(2), UInt(2), UInt(1), UInt(2), UInt(2), UInt(2), UInt(2), UInt(1), UInt(2), UInt(0), UInt(0), UInt(0), UInt(2), UInt(2), UInt(1), UInt(0), UInt(0), UInt(2), UInt(2), UInt(2), UInt(0), UInt(0), UInt(2), UInt(2), UInt(0), UInt(1), UInt(0), UInt(2), UInt(2), UInt(1), UInt(1), UInt(0), UInt(2), UInt(2), UInt(2), UInt(1), UInt(0), UInt(2), UInt(2), UInt(0), UInt(2), UInt(0), UInt(2), UInt(2), UInt(1), UInt(2), UInt(0), UInt(2), UInt(2), UInt(2), UInt(2), UInt(0), UInt(2), UInt(2), UInt(0), UInt(0), UInt(1), UInt(2), UInt(2), UInt(1), UInt(0), UInt(1), UInt(2), UInt(2), UInt(2), UInt(0), UInt(1), UInt(2), UInt(2), UInt(0), UInt(1), UInt(1), UInt(2), UInt(2), UInt(1), UInt(1), UInt(1), UInt(2), UInt(2), UInt(2), UInt(1), UInt(1), UInt(2), UInt(2), UInt(0), UInt(2), UInt(1), UInt(2), UInt(2), UInt(1), UInt(2), UInt(1), UInt(2), UInt(2), UInt(2), UInt(2), UInt(1), UInt(2), UInt(2), UInt(0), UInt(0), UInt(2), UInt(2), UInt(2), UInt(1), UInt(0), UInt(2), UInt(2), UInt(2), UInt(2), UInt(0), UInt(2), UInt(2), UInt(2), UInt(0), UInt(1), UInt(2), UInt(2), UInt(2), UInt(1), UInt(1), UInt(2), UInt(2), UInt(2), UInt(2), UInt(1), UInt(2), UInt(2), UInt(2), UInt(0), UInt(2), UInt(2), UInt(2), UInt(2), UInt(1), UInt(2), UInt(2), UInt(2), UInt(2), UInt(2), UInt(2), UInt(2), UInt(2), UInt(2)))

val index = io.ina*UInt(5)

//depending on b input choose a diff column in the row

io.r3IC := constants(index+io.inb)

//stuff here


}


class r3icLUTtest (c: r3icLUT) extends Tester (c) {


poke(c.io.ina, 145)
poke(c.io.inb, 4)

step(1)

expect(c.io.r3IC, 1)



}
