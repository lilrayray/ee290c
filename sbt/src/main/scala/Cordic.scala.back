package Work {

import Chisel._
import Node._
import scala.collection.mutable.HashMap
import scala.math._
import CordicConstants._

// Parameters for generated implementation
case class CordicParams(k: Int, l: Int, R: Double) {

  // Your code goes here.

  // Set number of total iterations
  val iterations = k
  // set number of stages
  val stages = ceil(k*R)

  // val itspersage = iterations/stages

}

// Constants
object CordicConstants
{
  val ROTATION = Bool(true)
  val VECTORING = Bool(false)
  val D_POS = Bool(true)
  val D_NEG = Bool(false)
}

// Coordinates and rotation mode data
class CordicData(implicit params: CordicParams) extends Bundle() {
  val x = SInt(width = params.k)
  val y = SInt(width = params.k)
  val z = SInt(width = params.l)
  val mode = Bool()
  override def clone: this.type = { new CordicData().asInstanceOf[this.type]; }
}

// IO consists of coordinates, mode, and valid bit
class CordicIo(implicit params: CordicParams)  extends Bundle() {
  // Add valid bit to CordicData, access with in.bits.x, etc.
  val in = new ValidIO(new CordicData()).flip
  val out = new ValidIO(new CordicData())
}

// A single rotation stage that starts when ready and input is valid, then after
// a number of iterations produces valid output.
// offset is the starting iteration (rotation number - 1)
// iterations is the number of iterations to perform until valid output
class CordicStage(offset: Int, iterations: Int)(implicit params: CordicParams) extends Module {
  val io = new CordicIo()
  
  //store angles in a ROM
  val angle_vec = Vec(Array(SInt(8192, width=16), SInt(4836, width=16), SInt(2555, width=16), SInt(1297, width=16), SInt(651, width=16), SInt(325, width=16), SInt(162, width=16), SInt(81, width=16), SInt(40,width=16), SInt(20, width=16), SInt(10, width=16), SInt(5, width=16), SInt(2, width=16), SInt(1, width =16), SInt(0, width=16), SInt(0, width=16)))

  //instantiate a counter that counts up from one to the number of iterations per stage, and resets to one
  
 

  val counter = Reg (init = UInt(0, width=5))
  //counter := Mux (io.in.valid === Bool(true), UInt(0), counter + UInt(1))

  when (reset){
   counter := UInt(0)
  } .otherwise {
   counter := counter + UInt(1)
  }

  //registers for outputs
  val xreg = Reg (SInt())
  val yreg = Reg (SInt())
  val zreg = Reg (SInt())
  val xshift = Reg (SInt())
  val yshift = Reg (SInt())
  //val yshiftadd = Reg (SInt())
  //val xshiftadd = Reg(SInt())
  //val zshiftadd = Reg(SInt())

  //when the counter is at zero, put the intial values in the register, when its not zero put output values in
  when (io.in.valid === Bool(true) ) { 
      xreg := io.in.bits.x
      yreg := io.in.bits.y
      zreg := io.in.bits.z
  } .elsewhen (io.in.valid != Bool(true) ) {
      xreg := io.out.bits.x
      yreg := io.out.bits.y
      zreg := io.out.bits.z
  }
  
  //have to initialize
  io.out.valid := Bool(false)

  //for each iteration, shift by the offset and 
  when ( counter === UInt(iterations)) {
      
          io.out.valid := Bool(true)
      
  } .otherwise {
      io.out.valid := Bool(false)
      
      
  }
      val bitshift = UInt(offset) + counter 
      val angleshift = bitshift - UInt(1)
      xshift :=  xreg >> bitshift
      yshift :=  yreg >> bitshift
      val topbit =  15 
      //val yMSB := yreg(topbit)
      //val zMSB := zreg(topbit)

      val d = Reg(init = SInt(1,width=2)) 
    

      //maybe read in mode into a register at the beginning when the valid goes high?
      when (io.in.bits.mode === Bool(true)){

         //d := Mux(zreg(topbit)===UInt(1), SInt(-1), SInt(1))
          when (zreg(topbit) === UInt(0)){
              d := SInt(1)
          }.otherwise  {
              d := SInt(-1)
          }
      } .otherwise{

          d := Mux(yreg(topbit)===UInt(0), SInt(-1), SInt(1))
           
      }



    //update the output bits
      //xshiftadd := d*xshift
      //yshiftadd := d*yshift
      //zshiftadd := d*angle_vec(angleshift)
       
     //NOTE TO MICHAEL- when I get rid of the d in the following assignments, the right values result (not for the test but logically what you would expect)
     // but when i have d in there, and when it is equal to negative one, as it is in the first test, i get ridiculous values put into the output bits....

      io.out.bits.x := Mux (d === SInt(1), xreg - yshift, xreg+yshift)
      io.out.bits.y := Mux (d === SInt(1), yreg + xshift, yreg-xshift)
      io.out.bits.z := Mux (d === SInt(1), zreg - angle_vec(angleshift), zreg+angle_vec(angleshift))
      io.out.bits.mode := io.in.bits.mode
  
          

}

class Cordic(paramsIn: CordicParams) extends Module {
  implicit val params = paramsIn
  val io = new CordicIo()

  //if (params.R === Double(1.0)) {
    val CS1 = Module(new CordicStage(0, params.iterations))
    // Your code goes here.
    // Note: <> can connect bundles
    //CS1.io.in.valid := Bool(true)

    io.in <> CS1.io.in
    CS1.io.out <> io.out
  





}


class CordicTester(c: Cordic) extends Tester(c) {
    
  // Amount of error accepted without failing test case (Modify if needed)
  val error = 5

  //---------- TEST HELPER FUNCTIONS ----------//

  // Gain depends on number of iterations
  val An = (0 to c.params.iterations).map(i => sqrt(1+pow(2,-2*i))).reduceLeft(_ * _)


  // Convert double to fixed-point with f fractional bits
  def doubleToBigInt(in: Double, f: Int): BigInt = { (in*pow(2,f)).toInt }

  // Convert radians to modulo 2*pi with w bits
  def radiansToBigInt(in: Double, w: Int): BigInt = { ((in/(2*Pi))*pow(2,w)).toInt }

  // Generate bits for a test vector that will be applied to input and
  // expected at output.
  // 'f' is number of fractional bits in fixed-point representation 
  def testData(x: Double, y: Double, f: Int, z: Double, mode: Bool): Array[BigInt] = {
      Array(doubleToBigInt(x, f), doubleToBigInt(y, f), radiansToBigInt(z, c.params.l),
      mode.litValue())
  }

  // Tester expects unsigned BigInt, so convert all signed to unsigned.
  def testDataUnsigned(data: Array[BigInt], bw: Array[Int]): Array[BigInt] = { 
      (data, bw).zipped.map((data: BigInt, bw: Int) =>
      data & ((1<<bw)-1)) }

  // Want results as signed BigInt, so convert all unsigned to signed.
  def testDataSigned(data: Array[BigInt], bw: Array[Int]): Array[BigInt] = { 
      (data, bw).zipped.map((data: BigInt, bw: Int) =>
      if(data >= (1<<(bw-1))) (data-(1<<bw)) else data) }

  // Check output bits against expected data
  def checkTestData(result: Array[BigInt], expected: Array[BigInt]): Boolean = {
    var isClose = true
    for(i <- 0 until expected.length) {
      val expLow = expected(i) - error
      val expHigh = expected(i) + error
      val msg = "CHECK " + i + " <- " + expLow + " <= " + result(i) + " <= " + expHigh
      if((result(i) >= expLow) && (result(i) <= expHigh))
      {
        println(msg + " PASS");
      } else {
        println(msg + " FAIL");
        isClose = false
      }
    }
    isClose
  }
  
  //---------- GENERATE TEST VECTORS ----------//

  // Polar (r, angle) to rectangular (X, Y): 
  // x=r/An, y=0, z=angle -> x=X, y=Y, z=0
  val rangeRotation = Range(-90,90,30)
  //val rangeRotation = Range(-180,180,30)
  val testsRotation = for(i <- rangeRotation) yield {
    (("Testing rotation with r=1, angle=" + i + " degrees"),
     testData(1/An, 0, c.params.k-3, toRadians(i), ROTATION),
     testData(cos(toRadians(i)), sin(toRadians(i)), c.params.k-3, 0, ROTATION))
  }

  // Rectangular (X, Y) to polar (r, angle): 
  // x=X/An, y=Y/An, z=0 -> x=r, y=0, z=angle
  val rangeVectoring = Range(-90,90,30)
  //val rangeVectoring = Range(-180,180,30)
  val testsVectoring = for(i <- rangeVectoring) yield {
    (("Testing vectoring with x=cos(" + i + "), y=sin(" + i + ")"),
     testData(cos(toRadians(i))/An, sin(toRadians(i))/An, c.params.k-3, 0, VECTORING),
     testData(1, 0, c.params.k-3, toRadians(i), VECTORING))
  }
  
  val tests = testsRotation ++ testsVectoring
  
  //---------- RUN TESTS ----------//

  // Bitwidths for test values
  val bw = Array(c.params.k, c.params.k, c.params.l, 1)

  // Iterate over tests
  for(test <- tests) {
    println(test._1)
    // Set input data
    poke(c.io.in.valid, 1)
    poke(c.io.in.bits, testDataUnsigned(test._2, bw))

    // Step forward 'iterations' cycles
    step(1)
    poke(c.io.in.valid, 0)
    for(i <- 0 until c.params.iterations) { step(1) }

    // Check output data
    expect(c.io.out.valid, 1)
    ok &&= checkTestData(testDataSigned(peek(c.io.out.bits), bw),
    testDataSigned(test._3, bw))

    // Clear outputs
    reset()
  }
}

}
