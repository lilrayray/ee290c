Package FFT
import Chisel._
import Node._
import scala.math._


Class radix235 (x0: Complex, x1: Complex, x2: Complex ,x3: Complex, x4: Complex, butterflyradix: Int, twiddle1: Complex, twiddle2: Complex, twiddle3: Complex, twiddle4:Complex) {
    // In Chisel, should have complex add/multiply sub-blocks
    // Use 2 of these blocks to do increase butterflies in parallel to keep
    // computation cycles below N - depends on max N and will not be
    // programmable for this version of the code
    // Each unit is capable of doing 2 radix-2 butterflies
    // Complex mul can be optimized (*j)
    
    // Edit: NVM. Just run at 2x clock speed to guarantee completion in N
    // x1 clock cycles. Use radix-4 FFT generally, use radix 2 at end if
    // odd
    
    val j=sqrt(-1);
    
       
    val k0=SInt(cos(4*pi/5), width = 16)
    val k10=-sin(4*pi/5)
    val k11=sin(2*pi/5)+sin(4*pi/5)
    //k12=-sin(2*pi/5)+sin(4*pi/5);
    
    when (butterflyradix==3) {
        val k12=-sin(2*pi/3)
    } .otherwise {
        val k12=-sin(2*pi/5)+sin(4*pi/5)
    }  
    
    a0 := x0
    //a1 = x1+x4;
    //a2=x2+x3;       
    //a3=x2-x3;       
    //a4=x1-x4;
    
    when (butterflyradix==4) {
        a22:=x0
    } .otherwise {
        a22:=x3
    }
    
    a2:=x2+a22      // radix-4 a0
    
    when (butterflyradix==4) {
        a31:=x0
        a32:=x2
    } .otherwise {
        a31:=x2
        a32:=x3
    }
    
    a3:=a31-a32     // radix-4 a1
    
    when (butterflyradix==2) {
        a12 := x0
    } .elsewhen (butterflyradix == 3) {
        a12 := x2
    } .elsewhen (butterflyradix == 4) {
        a12 := x3
    } .otherwise {
        a12 := x4
    }
        
    a1 := x1+a12    // radix-3 a1, radix-2 y0, radix-4 a2
    
    when (butterflyradix == 3) {
        a42 := x2
    } .elsewhen (butterflyradix == 4) {
        a42 := x3
    } .otherwise {
        a42 := x4
    }
    
    a4 := x1-a42    // radix-3 a2, radix-4 a3
    
    // note that you can use a2, a3 directly for second radix-2 butterfly
    
    b0:=a0
    b1:=a1
    b2:=a2
    b3:=a3
    b4:=a4
    //b5=a1-a2;
    
    when (butterflyradix==4) {
       b51:=a2
       b52:=a1
    } .otherwise {
        b51:=a1
        b52:=a2
    }
    
    b5 := b51-b52   // radix-4 y2
    
    b6:=a3+a4
    c0:=b0
    c1:=b0-b1/2     // radix-3 b1; radix 3 term plugs in directly
    //c2=b0-b2/2;
    
    when (butterflyradix==2) {
        c22 := x1
    } .otherwise {
        c22:=b2/2
    }
    
    c2:=b0-c22      // radix-2 y1
        
    c3:=k11*b3
    c4:=k12*b4      // radix-3 b2 when k12 is cased out
    c5:=k0*b5
    c6:=k10*b6
    c7:=b1+b2       // radix-4 y0
    //d0=c0+c7;
    //d1=c1-c5;
    d2:=c2+c5
    d3:=c3+c6
    //d4=c4+c6;
    
    when (butterflyradix==3) {
        d02:=a1
    } .otherwise {
        d02:=c7
    }
    
    d0 := c0+d02    // radix-3 b0 = y0
    
    when (butterflyradix==3) {
        d12:=0
    } .otherwise {
        d12:=c5
    }
    
    d1 := c1-d12
    
    when (butterflyradix==3) {
        d42:=0
    } .otherwise {
        d42:=c6
    }
    
    d4 := c4+d42
    
    yz0:=d0
    yz1:=d1+j*d4    // radix-3 y1
    
    //yz2=d2+j*d3;
    //yz3=d2-j*d3;
    
    when (butterflyradix==4) {
        yz21:=a3
        yz22:=a4
    } .otherwise {
        yz21:=d2
        yz22:=d3
    }
    
    yz2:=yz21+j*yz22    // radix-4 y3
    yz3:=yz21-j*yz22    // radix-4 y1
    yz4:=d1-j*d4        // radix-3 y2
    
   yy4:=yz4

   when (butterflyradix==4) {
       yy3:=yz2
   } .otherwise {
       yy3:=yz3
   }


   when (butterflyradix==4) {
       yy2:=b5
   } .elsewhen (butterflyradix==3) {
       yy2:=yz4
   } .otherwise {
       yy2:=yz2
   }

   when (butterflyradix==4) {
       yy1:=yz3
   } .elsewhen (butterflyradix==3) {
       yy1:=yz1
   } .elsewhen (butterflyradix==2) {
       yy1:=c2
   } .otherwise {
       yy1:=yz1
   }

   when (butterflyradix==4) {
       y0:=c7
   } .elsewhen (butterflyradix==3) {
       y0:=d0
   } .elsewhen (butterflyradix==2) {
       y0:=a1
   } .otherwise {
       y0:=yz0
   }
   
   y1 :=yy1*twiddle1
   y2 :=yy2*twiddle2
   y3 :=yy3*twiddle3
   y4 :=yy4*twiddle4

end


